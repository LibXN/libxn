/* "ucd.h"
 * Copyright (C) 2011 Sebastian Böthin.
 *
 * Project home: <http://www.LibXN.org>
 * Author: Sebastian Böthin <sebastian.eu>
 *
 * This file is part of LibXN.
 *
 * LibXN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LibXN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LibXN.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated File.
      --> Do not edit this file, edit the generator instead. <--
  @ vmdebian [Fri Jun 13 20:25:55 2014]
*/
#pragma once
#ifndef __UCD_H__
#define __UCD_H__

#line 26 "../gen/scripts/010_ucd_gc.pl"
/*
  General_Category (gc)

  see "Table 12. General_Category Values";
    http://www.unicode.org/reports/tr44/#General_Category_Values
  
*/
#line 62 "../gen/scripts/010_ucd_gc.pl"
enum UCD_GENERAL_CATEGORY
{
  ucd_gc_Undefined = 0 /* Outside the Unicode code point range */,
  ucd_gc_Lu = 1 /* (Uppercase_Letter) An uppercase letter */,
  ucd_gc_Ll = 2 /* (Lowercase_Letter) A lowercase letter */,
  ucd_gc_Lt = 3 /* (Titlecase_Letter) A digraphic character, with first part uppercase */,
  ucd_gc_Lm = 4 /* (Modifier_Letter) A modifier letter */,
  ucd_gc_Lo = 5 /* (Other_Letter) Other letters, including syllables and ideographs */,
  ucd_gc_Mn = 6 /* (Nonspacing_Mark) A nonspacing combining mark (zero advance width) */,
  ucd_gc_Mc = 7 /* (Spacing_Mark) A spacing combining mark (positive advance width) */,
  ucd_gc_Me = 8 /* (Enclosing_Mark) An enclosing combining mark */,
  ucd_gc_Nd = 9 /* (Decimal_Number) A decimal digit */,
  ucd_gc_Nl = 10 /* (Letter_Number) A letterlike numeric character */,
  ucd_gc_No = 11 /* (Other_Number) A numeric character of other type */,
  ucd_gc_Pc = 12 /* (Connector_Punctuation) A connecting punctuation mark, like a tie */,
  ucd_gc_Pd = 13 /* (Dash_Punctuation) A dash or hyphen punctuation mark */,
  ucd_gc_Ps = 14 /* (Open_Punctuation) An opening punctuation mark (of a pair) */,
  ucd_gc_Pe = 15 /* (Close_Punctuation) A closing punctuation mark (of a pair) */,
  ucd_gc_Pi = 16 /* (Initial_Punctuation) An initial punctuation mark */,
  ucd_gc_Pf = 17 /* (Final_Punctuation) A final quotation mark */,
  ucd_gc_Po = 18 /* (Other_Punctuation) A punctuation mark of other type */,
  ucd_gc_Sm = 19 /* (Math_Symbol) A symbol of primarily mathematical use */,
  ucd_gc_Sc = 20 /* (Currency_Symbol) A currency sign */,
  ucd_gc_Sk = 21 /* (Modifier_Symbol) A non-letterlike modifier symbol */,
  ucd_gc_So = 22 /* (Other_Symbol) A symbol of other type */,
  ucd_gc_Zs = 23 /* (Space_Separator) A space character (of various non-zero widths) */,
  ucd_gc_Zl = 24 /* (Line_Separator) U+2028 LINE SEPARATOR only */,
  ucd_gc_Zp = 25 /* (Paragraph_Separator) U+2029 PARAGRAPH SEPARATOR only */,
  ucd_gc_Cc = 26 /* (Control) A C0 or C1 control code */,
  ucd_gc_Cf = 27 /* (Format) A format control character */,
  ucd_gc_Cs = 28 /* (Surrogate) A surrogate code point */,
  ucd_gc_Co = 29 /* (Private_Use) A private-use character */,
  ucd_gc_Cn = 30 /* (Unassigned) A reserved unassigned code point or a noncharacter */
};


#line 65 "../gen/scripts/010_ucd_gc.pl"


#line 23 "../gen/scripts/020_ucd_bc.pl"
/*
  Bidi_Class (bc)

  see: "Table 13. Bidi_Class Values";
    http://www.unicode.org/reports/tr44/#Bidi_Class_Values
*/

#line 56 "../gen/scripts/020_ucd_bc.pl"
enum UCD_BIDI_CLASS
{
  ucd_bidi_L = 1 /* (Left_To_Right) Any strong left-to-right character */,
  ucd_bidi_LRE = 2 /* (Left_To_Right_Embedding) U+202A: The LR embedding control */,
  ucd_bidi_LRO = 3 /* (Left_To_Right_Override) U+202D: The LR override control */,
  ucd_bidi_R = 4 /* (Right_To_Left) Any strong right-to-left (non-Arabic-type) character */,
  ucd_bidi_AL = 5 /* (Arabic_Letter) Any strong right-to-left (Arabic-type) character */,
  ucd_bidi_RLE = 6 /* (Right_To_Left_Embedding) U+202B: The RL embedding control */,
  ucd_bidi_RLO = 7 /* (Right_To_Left_Override) U+202E: The RL override control */,
  ucd_bidi_PDF = 8 /* (Pop_Directional_Format) U+202C: terminates an embedding or override control */,
  ucd_bidi_EN = 9 /* (European_Number) Any ASCII digit or Eastern Arabic-Indic digit */,
  ucd_bidi_ES = 10 /* (European_Separator) Plus and minus signs */,
  ucd_bidi_ET = 11 /* (European_Terminator) A terminator in a numeric format context, includes currency signs */,
  ucd_bidi_AN = 12 /* (Arabic_Number) Any Arabic-Indic digit */,
  ucd_bidi_CS = 13 /* (Common_Separator) Commas, colons, and slashes */,
  ucd_bidi_NSM = 14 /* (Nonspacing_Mark) Any nonspacing mark */,
  ucd_bidi_BN = 15 /* (Boundary_Neutral) Most format characters, control codes, or noncharacters */,
  ucd_bidi_B = 16 /* (Paragraph_Separator) Various newline characters */,
  ucd_bidi_S = 17 /* (Segment_Separator) Various segment-related control codes */,
  ucd_bidi_WS = 18 /* (White_Space) Spaces */,
  ucd_bidi_ON = 19 /* (Other_Neutral) Most other symbols and punctuation marks */
};


#line 59 "../gen/scripts/020_ucd_bc.pl"


#line 25 "../gen/scripts/030_ucd_dt.pl"
/*
  Decomposition_Type (dt)

  see "Table 14. Compatibility Formatting Tags";
    http://www.unicode.org/reports/tr44/#Character_Decomposition_Mappings

The prefixed tags supplied with a subset of the decomposition mappings generally
indicate formatting information. Where no such tag is given, the mapping is
canonical. Conversely, the presence of a formatting tag also indicates that
the mapping is a compatibility mapping and not a canonical mapping.
In the absence of other formatting information in a compatibility mapping,
the tag is used to distinguish it from canonical mappings.

additional fields added:
  None: default
  Canonical: no tag given
(cf.: PropertyValueAliases.txt)
  
*/
#line 76 "../gen/scripts/030_ucd_dt.pl"
enum UCD_DECOMPOSITION_TYPE
{
  ucd_dt_None = 0 /* Default value (None) */,
  ucd_dt_Canonical = 1 /* Canonical decomposition (Can) */,
  ucd_dt_Font = 2 /* Font variant (for example, a blackletter form) (Font) */,
  ucd_dt_Nobreak = 3 /* No-break version of a space or hyphen (Nb) */,
  ucd_dt_Initial = 4 /* Initial presentation form (Arabic) (Init) */,
  ucd_dt_Medial = 5 /* Medial presentation form (Arabic) (Med) */,
  ucd_dt_Final = 6 /* Final presentation form (Arabic) (Fin) */,
  ucd_dt_Isolated = 7 /* Isolated presentation form (Arabic) (Iso) */,
  ucd_dt_Circle = 8 /* Encircled form (Enc) */,
  ucd_dt_Super = 9 /* Superscript form (Sup) */,
  ucd_dt_Sub = 10 /* Subscript form (Sub) */,
  ucd_dt_Vertical = 11 /* Vertical layout presentation form (Vert) */,
  ucd_dt_Wide = 12 /* Wide (or zenkaku) compatibility character (Wide) */,
  ucd_dt_Narrow = 13 /* Narrow (or hankaku) compatibility character (Nar) */,
  ucd_dt_Small = 14 /* Small variant form (CNS compatibility) (Sml) */,
  ucd_dt_Square = 15 /* CJK squared font variant (Sqr) */,
  ucd_dt_Fraction = 16 /* Vulgar fraction form (Fra) */,
  ucd_dt_Compat = 17 /* Otherwise unspecified compatibility character (Com) */
};


#line 79 "../gen/scripts/030_ucd_dt.pl"


#line 38 "../gen/scripts/110_ucd_script.pl"
/*
Unicode Script Names

  source:
    http://www.unicode.org/Public/UNIDATA/Scripts.txt
*/
#line 113 "../gen/scripts/110_ucd_script.pl"
enum UCD_SCRIPT
{
  ucd_script_Unknown = 0 /* unassigned, private-use, noncharacter, and surrogate code points */,
  ucd_script_Common = 1 /* characters that may be used with multiple script */,
  ucd_script_Inherited = 2 /* characters that may be used with multiple scripts, and that inherit their script from the preceding characters */,
  ucd_script_Latin = 3 /* Latin script */,
  ucd_script_Greek = 4 /* Greek script */,
  ucd_script_Cyrillic = 5 /* Cyrillic script */,
  ucd_script_Armenian = 6 /* Armenian script */,
  ucd_script_Hebrew = 7 /* Hebrew script */,
  ucd_script_Arabic = 8 /* Arabic script */,
  ucd_script_Syriac = 9 /* Syriac script */,
  ucd_script_Thaana = 10 /* Thaana script */,
  ucd_script_Devanagari = 11 /* Devanagari script */,
  ucd_script_Bengali = 12 /* Bengali script */,
  ucd_script_Gurmukhi = 13 /* Gurmukhi script */,
  ucd_script_Gujarati = 14 /* Gujarati script */,
  ucd_script_Oriya = 15 /* Oriya script */,
  ucd_script_Tamil = 16 /* Tamil script */,
  ucd_script_Telugu = 17 /* Telugu script */,
  ucd_script_Kannada = 18 /* Kannada script */,
  ucd_script_Malayalam = 19 /* Malayalam script */,
  ucd_script_Sinhala = 20 /* Sinhala script */,
  ucd_script_Thai = 21 /* Thai script */,
  ucd_script_Lao = 22 /* Lao script */,
  ucd_script_Tibetan = 23 /* Tibetan script */,
  ucd_script_Myanmar = 24 /* Myanmar script */,
  ucd_script_Georgian = 25 /* Georgian script */,
  ucd_script_Hangul = 26 /* Hangul script */,
  ucd_script_Ethiopic = 27 /* Ethiopic script */,
  ucd_script_Cherokee = 28 /* Cherokee script */,
  ucd_script_CanadianAboriginal = 29 /* Canadian_Aboriginal script */,
  ucd_script_Ogham = 30 /* Ogham script */,
  ucd_script_Runic = 31 /* Runic script */,
  ucd_script_Khmer = 32 /* Khmer script */,
  ucd_script_Mongolian = 33 /* Mongolian script */,
  ucd_script_Hiragana = 34 /* Hiragana script */,
  ucd_script_Katakana = 35 /* Katakana script */,
  ucd_script_Bopomofo = 36 /* Bopomofo script */,
  ucd_script_Han = 37 /* Han script */,
  ucd_script_Yi = 38 /* Yi script */,
  ucd_script_OldItalic = 39 /* Old_Italic script */,
  ucd_script_Gothic = 40 /* Gothic script */,
  ucd_script_Deseret = 41 /* Deseret script */,
  ucd_script_Tagalog = 42 /* Tagalog script */,
  ucd_script_Hanunoo = 43 /* Hanunoo script */,
  ucd_script_Buhid = 44 /* Buhid script */,
  ucd_script_Tagbanwa = 45 /* Tagbanwa script */,
  ucd_script_Limbu = 46 /* Limbu script */,
  ucd_script_TaiLe = 47 /* Tai_Le script */,
  ucd_script_LinearB = 48 /* Linear_B script */,
  ucd_script_Ugaritic = 49 /* Ugaritic script */,
  ucd_script_Shavian = 50 /* Shavian script */,
  ucd_script_Osmanya = 51 /* Osmanya script */,
  ucd_script_Cypriot = 52 /* Cypriot script */,
  ucd_script_Braille = 53 /* Braille script */,
  ucd_script_Buginese = 54 /* Buginese script */,
  ucd_script_Coptic = 55 /* Coptic script */,
  ucd_script_NewTaiLue = 56 /* New_Tai_Lue script */,
  ucd_script_Glagolitic = 57 /* Glagolitic script */,
  ucd_script_Tifinagh = 58 /* Tifinagh script */,
  ucd_script_SylotiNagri = 59 /* Syloti_Nagri script */,
  ucd_script_OldPersian = 60 /* Old_Persian script */,
  ucd_script_Kharoshthi = 61 /* Kharoshthi script */,
  ucd_script_Balinese = 62 /* Balinese script */,
  ucd_script_Cuneiform = 63 /* Cuneiform script */,
  ucd_script_Phoenician = 64 /* Phoenician script */,
  ucd_script_PhagsPa = 65 /* Phags_Pa script */,
  ucd_script_Nko = 66 /* Nko script */,
  ucd_script_Sundanese = 67 /* Sundanese script */,
  ucd_script_Lepcha = 68 /* Lepcha script */,
  ucd_script_OlChiki = 69 /* Ol_Chiki script */,
  ucd_script_Vai = 70 /* Vai script */,
  ucd_script_Saurashtra = 71 /* Saurashtra script */,
  ucd_script_KayahLi = 72 /* Kayah_Li script */,
  ucd_script_Rejang = 73 /* Rejang script */,
  ucd_script_Lycian = 74 /* Lycian script */,
  ucd_script_Carian = 75 /* Carian script */,
  ucd_script_Lydian = 76 /* Lydian script */,
  ucd_script_Cham = 77 /* Cham script */,
  ucd_script_TaiTham = 78 /* Tai_Tham script */,
  ucd_script_TaiViet = 79 /* Tai_Viet script */,
  ucd_script_Avestan = 80 /* Avestan script */,
  ucd_script_EgyptianHieroglyphs = 81 /* Egyptian_Hieroglyphs script */,
  ucd_script_Samaritan = 82 /* Samaritan script */,
  ucd_script_Lisu = 83 /* Lisu script */,
  ucd_script_Bamum = 84 /* Bamum script */,
  ucd_script_Javanese = 85 /* Javanese script */,
  ucd_script_MeeteiMayek = 86 /* Meetei_Mayek script */,
  ucd_script_ImperialAramaic = 87 /* Imperial_Aramaic script */,
  ucd_script_OldSouthArabian = 88 /* Old_South_Arabian script */,
  ucd_script_InscriptionalParthian = 89 /* Inscriptional_Parthian script */,
  ucd_script_InscriptionalPahlavi = 90 /* Inscriptional_Pahlavi script */,
  ucd_script_OldTurkic = 91 /* Old_Turkic script */,
  ucd_script_Kaithi = 92 /* Kaithi script */,
  ucd_script_Batak = 93 /* Batak script */,
  ucd_script_Brahmi = 94 /* Brahmi script */,
  ucd_script_Mandaic = 95 /* Mandaic script */,
  ucd_script_Chakma = 96 /* Chakma script */,
  ucd_script_MeroiticCursive = 97 /* Meroitic_Cursive script */,
  ucd_script_MeroiticHieroglyphs = 98 /* Meroitic_Hieroglyphs script */,
  ucd_script_Miao = 99 /* Miao script */,
  ucd_script_Sharada = 100 /* Sharada script */,
  ucd_script_SoraSompeng = 101 /* Sora_Sompeng script */,
  ucd_script_Takri = 102 /* Takri script */
};




#line 26 "../gen/scripts/120_ucd_joining.pl"
/**
 * Shaping classes for Arabic and Syriac positional shaping.
 * see: http://unicode.org/Public/UNIDATA/ArabicShaping.txt
 *
 */
#line 61 "../gen/scripts/120_ucd_joining.pl"
enum UCD_JOINING_TYPE
{
  ucd_joining_Undefined = 0 /*  */,
  ucd_joining_R = 1 /* right-joining */,
  ucd_joining_L = 2 /* left-joining */,
  ucd_joining_D = 3 /* dual-joining */,
  ucd_joining_C = 4 /* join-causing */,
  ucd_joining_U = 5 /* non-joining */,
  ucd_joining_T = 6 /* transparent */
};


#line 64 "../gen/scripts/120_ucd_joining.pl"


#line 25 "../gen/scripts/160_rfc5892_property.pl"
/**
 * Derived property values according to rfc5892
 *
 */
#line 54 "../gen/scripts/160_rfc5892_property.pl"
enum RFC5892_Property
{
  rfc5892_UNASSIGNED = 0 /* Those code points that are not designated in the Unicode Standard. */,
  rfc5892_DISALLOWED = 1 /* Those that should clearly not be included in IDNs. */,
  rfc5892_CONTEXTJ = 2 /* CONTEXTUAL RULE REQUIRED: Join_controls */,
  rfc5892_CONTEXTO = 3 /* CONTEXTUAL RULE REQUIRED: other characters */,
  rfc5892_PVALID = 4 /* PROTOCOL VALID: Those that are allowed to be used in IDNs. */
};


#line 57 "../gen/scripts/160_rfc5892_property.pl"


#line 27 "../gen/scripts/190_uts46_mapping.pl"
/*
  Unicode IDNA Compatibility Processing
  see:
    http://unicode.org/reports/tr46/#IDNA_Mapping_Table

*/
#line 132 "../gen/scripts/190_uts46_mapping.pl"
#define UTS46_mapping_maxlength 18

#line 135 "../gen/scripts/190_uts46_mapping.pl"
enum UTS46_STATUS
{
  uts46_status_Valid = 1 /* The code point is valid, and not modified. */,
  uts46_status_Ignored = 2 /* The code point is removed: this is equivalent to mapping the code point to an empty string. */,
  uts46_status_Mapped = 3 /* The code point is replaced in the string by the value for the mapping. */,
  uts46_status_Deviation = 4 /* The code point is either mapped or valid, depending on whether the processing is transitional or not. */,
  uts46_status_Disallowed = 5 /* The code point is not allowed. */,
  uts46_status_DisallowedSTD3Valid = 6 /* The status is disallowed if UseSTD3ASCIIRules=true, otherwise valid. */,
  uts46_status_DisallowedSTD3Mapped = 7 /* The status is disallowed if UseSTD3ASCIIRules=true, otherwise mapped. */
};


#line 138 "../gen/scripts/190_uts46_mapping.pl"


#line 316 "../gen/scripts/200_ucd_records.pl"
#define UCD_DECOMPMAP_MAXL 36

/* ---- BEGIN "ucd.in.h" ---- */
#line 1 "../gen/src/ucd.in.h"



enum UCD_PROP_FLAG
{

  /* code points appearing as part of a canonical combining pair */
  ucd_prop_COMPOSING = 1,

  /* bidi mirrored property */
  ucd_prop_BIDI_MIRRORED = 2

};


/* UCD code point property record */
typedef struct UCD_RECORD
{

  /* The actual code point value */
  uint32_t cp;

  /* boolean properties */
  enum UCD_PROP_FLAG propflags;

  /* The Unicode character name */
  char name[100];

  /* General_Category
  cf.: http://www.unicode.org/reports/tr44/#General_Category_Values */
  enum UCD_GENERAL_CATEGORY general_category;

  enum UCD_SCRIPT script;

  enum UCD_BIDI_CLASS bidi_class;
  char bidi_mirrored;

  /* Canonical Combining Class Values */
  uint8_t ccc;

  /* Compatibility Formatting Tag
  cf.: http://www.unicode.org/reports/tr44/#Character_Decomposition_Mappings */
  enum UCD_DECOMPOSITION_TYPE dt;

  /* decomposition mapping sequence */
  uint32_t decomp[UCD_DECOMPMAP_MAXL];

  enum UCD_JOINING_TYPE joining_type;

  /* normalization form Quick_Check Value:
  data from Derived Normalization Properties file [NormProps] */
  enum UCNF_Quick_Check_value nfqc;

  /* Derived properties according to RFC5892 */
  enum RFC5892_Property rfc5892;

  enum UTS46_STATUS uts46_status;

  codepoint_t uts46_mapping[1+UTS46_mapping_maxlength];

  /* uppercase is 0 unless upper case mapping is defined */
  uint32_t uppercase;

  /* lowercase is 0 unless lower case mapping is defined */
  uint32_t lowercase;

}
ucd_record;


/* == "ucd.c" == */

#ifdef __cplusplus
extern "C" {
#endif

extern int ucd_get_record (uint32_t,ucd_record*);

extern int ucd_get_record_string(size_t, const codepoint_t[], ucd_record[]);

extern const char *ucd_version(void);

#ifdef __cplusplus
}
#endif


/* ---- END "ucd.in.h" ---- */


#endif
/* end of generated file */
